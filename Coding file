#include <ESP8266WiFi.h>
#include <PubSubClient.h>
// WiFi Configuration
#define WIFI_SSID     "hrithik"      // Replace with your WiFi SSID
#define WIFI_PASSWORD "off12345"  // Replace with your WiFi password

// MQTT Broker Configuration
#define MQTT_SERVER   "192.168.24.160"  // Replace with your MQTT broker IP/domain
#define MQTT_PORT     1883                // Default MQTT port
#define MQTT_USER     "hrithik"     // Optional, remove if not required
#define MQTT_PASSWORD "off12345"     // Optional, remove if not required

const char* topicTurbidity = "sensor/turbidity";

WiFiClient espClient;
PubSubClient client(espClient);

int sensorPin = A0;
unsigned long previousMillis = 0;
const long interval = 1000;

void setupWiFi() {
    Serial.print("Connecting to WiFi...");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWiFi Connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
}

void reconnectMQTT() {
    while (!client.connected()) {
        Serial.print("Connecting to MQTT...");
        if (client.connect("ESP8266Client", MQTT_USER, MQTT_PASSWORD)) {
            Serial.println("Connected!");
        } else {
            Serial.print("Failed (State: ");
            Serial.print(client.state());
            Serial.println("), retrying in 5 seconds...");
            delay(5000);
        }
    }
}

void setup() {
    Serial.begin(115200);
    pinMode(5, OUTPUT);  
    pinMode(4, OUTPUT);  
    pinMode(0, OUTPUT);  

    setupWiFi();
    client.setServer(MQTT_SERVER, MQTT_PORT);
}

void loop() {
    if (!client.connected()) {
        reconnectMQTT();
    }
    client.loop();

    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;

        int sensorValue = analogRead(sensorPin);
        int turbidity = map(sensorValue, 0, 640, 100, 0); 

        Serial.printf("Turbidity: %d NTU\n", turbidity);

        String message = "{\"turbidity\": " + String(turbidity) + "}";
        client.publish(topicTurbidity, message.c_str());

        if (turbidity < 25) {
            digitalWrite(5, HIGH);
            digitalWrite(4, LOW);
            digitalWrite(0, LOW);
            Serial.println("Status: CLEAR");
        } 
        else if (turbidity >= 25 && turbidity < 50) {
            digitalWrite(5, LOW);
            digitalWrite(4, HIGH);
            digitalWrite(0, LOW);
            Serial.println("Status: CLOUDY");
        } 
        else {
            digitalWrite(5, LOW);
            digitalWrite(4, LOW);
            digitalWrite(0, HIGH);
            Serial.println("Status: DIRTY");
        }

        Serial.println("--------------------");
    }
}
